(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{486:function(t,e,a){"use strict";a.r(e);var s=a(62),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"名词解释一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#名词解释一"}},[t._v("#")]),t._v(" 名词解释一")]),t._v(" "),a("h2",{attrs:{id:"ast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ast"}},[t._v("#")]),t._v(" AST")]),t._v(" "),a("p",[t._v("在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。比如，嵌套括号被隐含在树的结构中，并没有以节点的形式呈现；而类似于 if-condition-then 这样的条件跳转语句，可以使用带有两个分支的节点来表示。")]),t._v(" "),a("blockquote",[a("p",[t._v("和抽象语法树相对的是具体语法树（通常称作分析树）。一般的，在源代码的翻译和编译过程中，语法分析器创建出分析树。一旦AST被创建出来，在后续的处理过程中，比如语义分析阶段，会添加一些信息。")])]),t._v(" "),a("h2",{attrs:{id:"cli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cli"}},[t._v("#")]),t._v(" CLI")]),t._v(" "),a("p",[t._v("命令行界面（Command-Line Interface）")]),t._v(" "),a("h2",{attrs:{id:"npm脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm脚本"}},[t._v("#")]),t._v(" npm脚本")]),t._v(" "),a("p",[t._v("使用 npm 的 scripts，我们可以像使用 npx 那样通过模块名引用本地安装的 npm 包。这是大多数基于 npm 的项目遵循的标准，因为它允许所有贡献者使用同一组通用脚本（如果必要，每个 flag 都带有 --config 标志）")]),t._v(" "),a("blockquote",[a("p",[t._v("通过向 npm run build 命令和你的参数之间添加两个中横线，可以将自定义参数传递给 webpack，例如：npm run build -- --colors。")])]),t._v(" "),a("h2",{attrs:{id:"es-modules-esm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es-modules-esm"}},[t._v("#")]),t._v(" ES modules（ESM）")]),t._v(" "),a("p",[t._v("JavaScript 官方的标准化模块系统。")]),t._v(" "),a("h2",{attrs:{id:"tdd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tdd"}},[t._v("#")]),t._v(" TDD")]),t._v(" "),a("p",[t._v("TDD 有三层含义：")]),t._v(" "),a("h3",{attrs:{id:"test-driven-development-测试驱动开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-driven-development-测试驱动开发"}},[t._v("#")]),t._v(" Test-Driven Development，测试驱动开发")]),t._v(" "),a("p",[t._v("TDD是测试驱动开发（Test-Driven Development）的英文简称，是敏捷开发中的一项核心实践和技术，也是一种设计方法论。")]),t._v(" "),a("p",[t._v("TDD的原理是在开发功能代码之前，先编写单元测试用例代码，测试代码确定需要编写什么产品代码。")]),t._v(" "),a("h3",{attrs:{id:"task-driven-development-任务驱动开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#task-driven-development-任务驱动开发"}},[t._v("#")]),t._v(" Task-Driven Development，任务驱动开发")]),t._v(" "),a("p",[t._v("要对问题进行分析并进行任务分解。")]),t._v(" "),a("h3",{attrs:{id:"test-driven-design-测试保护下的设计改善"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-driven-design-测试保护下的设计改善"}},[t._v("#")]),t._v(" Test-Driven Design，测试保护下的设计改善")]),t._v(" "),a("p",[t._v("TDD 并不能直接提高设计能力，它只是给你更多机会和保障去改善设计。")])])}),[],!1,null,null,null);e.default=r.exports}}]);