(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{462:function(t,e,a){"use strict";a.r(e);var v=a(65),r=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-hooks"}},[t._v("#")]),t._v(" Git Hooks")]),t._v(" "),a("h2",{attrs:{id:"定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),a("p",[t._v("和其它版本控制系统一样，Git 能在特定的重要动作发生时触发自定义脚本。")]),t._v(" "),a("h2",{attrs:{id:"安装一个钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装一个钩子"}},[t._v("#")]),t._v(" 安装一个钩子")]),t._v(" "),a("p",[t._v("git init初始化一个新版本库时，git默认会在这个目录里放置一些示例脚本，除了本身可以被调用，还透露了被触发时所传入的参数")]),t._v(" "),a("p",[t._v("把一个正确命名"),a("code",[t._v("（不带扩展名）")]),t._v("且可执行的文件放入 .git 目录下的 hooks 子目录中，即可激活该钩子脚本。")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("所有的示例都是shell脚本，其中一些混杂了perl代码")]),t._v(" "),a("li",[t._v("任何正确命名的可执行脚本都可以正常使用（Ruby 或 Python或任何你熟悉的语言编写它们）")]),t._v(" "),a("li",[t._v("这些示例的名字都是以 .sample 结尾，如果你想启用它们，得先移除这个后缀。")])])]),t._v(" "),a("h2",{attrs:{id:"客户端钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端钩子"}},[t._v("#")]),t._v(" 客户端钩子")]),t._v(" "),a("p",[t._v("由诸如提交合并这样的操作所调用，分为：提交工作流钩子、电子邮件工作流钩子和其它钩子。")]),t._v(" "),a("h3",{attrs:{id:"提交工作流钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交工作流钩子"}},[t._v("#")]),t._v(" 提交工作流钩子")]),t._v(" "),a("h4",{attrs:{id:"pre-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-commit"}},[t._v("#")]),t._v(" pre-commit")]),t._v(" "),a("p",[t._v("钩子在"),a("code",[t._v("键入提交信息前")]),t._v("运行。")]),t._v(" "),a("p",[t._v("它用于检查即将提交的快照，例如，检查是否有所遗漏，确保测试运行，以及核查代码。 如果该钩子以"),a("code",[t._v("非零值退出")]),t._v("，Git 将放弃此次提交，不过你可以用 "),a("code",[t._v("git commit --no-verify")]),t._v(" 来绕过这个环节。 你可以利用该钩子，来"),a("code",[t._v("检查代码风格是否一致（运行类似 lint 的程序）")]),t._v("、"),a("code",[t._v("尾随空白字符是否存在")]),t._v("（自带的钩子就是这么做的），或新方法的文档是否适当。")]),t._v(" "),a("h4",{attrs:{id:"prepare-commit-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prepare-commit-msg"}},[t._v("#")]),t._v(" prepare-commit-msg")]),t._v(" "),a("p",[t._v("钩子在启动"),a("code",[t._v("提交信息编辑器")]),t._v("之前，"),a("code",[t._v("默认信息被创建之后")]),t._v("运行。")]),t._v(" "),a("p",[t._v("它允许你"),a("code",[t._v("编辑提交者所看到的默认信息")]),t._v("。")]),t._v(" "),a("p",[t._v("该钩子接收一些选项：存有当前提交信息的文件的路径、提交类型和修补提交的提交的 SHA-1 校验。")]),t._v(" "),a("p",[t._v("它对一般的提交来说并没有什么用；然而对那些会自动产生默认信息的提交，如"),a("code",[t._v("提交信息模板、合并提交、压缩提交和修订提交")]),t._v("等非常实用。 你可以结合提交模板来使用它，动态地插入信息。")]),t._v(" "),a("h4",{attrs:{id:"commit-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-msg"}},[t._v("#")]),t._v(" commit-msg")]),t._v(" "),a("p",[t._v("钩子接收一个参数，此参数即上文提到的，"),a("code",[t._v("存有当前提交信息的临时文件的路径")]),t._v("。")]),t._v(" "),a("p",[t._v("如果该钩子脚本以"),a("code",[t._v("非零值退出")]),t._v("，Git 将放弃提交，因此，可以用来在提交通过前验证项目状态或提交信息。")]),t._v(" "),a("h4",{attrs:{id:"post-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-commit"}},[t._v("#")]),t._v(" post-commit")]),t._v(" "),a("p",[t._v("钩子在整个提交过程完成后运行。\n它不接收任何参数，但你可以很容易地通过运行 git log -1 HEAD 来获得最后一次的提交信息。 该钩子一般用于"),a("code",[t._v("通知")]),t._v("之类的事情。")]),t._v(" "),a("h3",{attrs:{id:"电子邮件工作流钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#电子邮件工作流钩子"}},[t._v("#")]),t._v(" 电子邮件工作流钩子")]),t._v(" "),a("p",[t._v("你可以给电子邮件工作流设置三个客户端钩子。\n它们都是由 git am 命令调用的，如果你需要通过电子邮件接收由 "),a("code",[t._v("git format-patch")]),t._v(" 产生的补丁，这些钩子也许用得上。")]),t._v(" "),a("p",[t._v("第一个运行的钩子是 applypatch-msg 。 它接收单个参数：包含请求合并信息的临时文件的名字。 如果脚本返回非零值，Git 将放弃该补丁。 你可以用该脚本来确保提交信息符合格式，或直接用脚本修正格式错误。")]),t._v(" "),a("p",[t._v("下一个在 git am 运行期间被调用的是 pre-applypatch 。 有些难以理解的是，它正好运行于应用补丁 之后，产生提交之前，所以你可以用它在提交前检查快照。 你可以用这个脚本运行测试或检查工作区。 如果有什么遗漏，或测试未能通过，脚本会以非零值退出，中断 git am 的运行，这样补丁就不会被提交。")]),t._v(" "),a("p",[t._v("post-applypatch 运行于提交产生之后，是在 git am 运行期间最后被调用的钩子。 你可以用它把结果通知给一个小组或所拉取的补丁的作者。 但你没办法用它停止打补丁的过程。")]),t._v(" "),a("h3",{attrs:{id:"其它客户端钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其它客户端钩子"}},[t._v("#")]),t._v(" 其它客户端钩子")]),t._v(" "),a("h4",{attrs:{id:"pre-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-rebase"}},[t._v("#")]),t._v(" pre-rebase")]),t._v(" "),a("p",[t._v("钩子运行于"),a("code",[t._v("变基之前")]),t._v("，以"),a("code",[t._v("非零值退出")]),t._v("可以中止变基的过程。 你可以使用这个钩子来禁止对已经推送的提交变基。\nGit 自带的 pre-rebase 钩子示例就是这么做的，不过它所做的一些假设可能与你的工作流程不匹配。")]),t._v(" "),a("h4",{attrs:{id:"post-rewrite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-rewrite"}},[t._v("#")]),t._v(" post-rewrite")]),t._v(" "),a("p",[t._v("钩子被那些会替换提交记录的命令调用，比如 "),a("code",[t._v("git commit --amend")]),t._v(" 和 "),a("code",[t._v("git rebase（不过不包括 git filter-branch）")]),t._v("。 它唯一的参数是"),a("code",[t._v("触发重写的命令名")]),t._v("，同时从标准输入中接受一系列重写的提交记录。 这个钩子的用途很大程度上跟 post-checkout 和 post-merge 差不多。")]),t._v(" "),a("h4",{attrs:{id:"post-checkout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-checkout"}},[t._v("#")]),t._v(" post-checkout")]),t._v(" "),a("p",[t._v("在 git checkout 成功运行后，post-checkout 钩子会被调用。你可以根据你的项目环境用它调整你的工作目录。 其中包括放入大的二进制文件、自动生成文档或进行其他类似这样的操作。")]),t._v(" "),a("h4",{attrs:{id:"post-merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-merge"}},[t._v("#")]),t._v(" post-merge")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("git merge")]),t._v("成功运行后，"),a("code",[t._v("post-merge")]),t._v(" 钩子会被调用。 你可以用它恢复 Git 无法跟踪的工作区数据，比如权限数据。 这个钩子也可以用来验证某些在 Git 控制之外的文件是否存在，这样你就能在工作区改变时，把这些文件复制进来。")]),t._v(" "),a("h4",{attrs:{id:"pre-push"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-push"}},[t._v("#")]),t._v(" pre-push")]),t._v(" "),a("p",[t._v("pre-push 钩子会在 "),a("code",[t._v("git push")]),t._v(" 运行期间， 更新了远程引用但尚未传送对象时被调用。 它接受远程分支的名字和位置作为参数，同时从标准输入中读取一系列待更新的引用。 你可以在推送开始之前，用它验证对引用的更新操作（一个非零的退出码将终止推送过程）。")]),t._v(" "),a("h4",{attrs:{id:"pre-auto-gc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-auto-gc"}},[t._v("#")]),t._v(" pre-auto-gc")]),t._v(" "),a("p",[t._v("Git 的一些日常操作在运行时，偶尔会调用"),a("code",[t._v("git gc --auto")]),t._v("进行垃圾回收。 pre-auto-gc 钩子会在垃圾回收开始之前被调用，可以用它来提醒你现在要回收垃圾了，或者依情形判断是否要中断回收。")]),t._v(" "),a("h2",{attrs:{id:"服务器端钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务器端钩子"}},[t._v("#")]),t._v(" 服务器端钩子")]),t._v(" "),a("p",[t._v("作用于诸如接收被推送提交这样的联网操作")]),t._v(" "),a("p",[t._v("除了客户端钩子，作为系统管理员，你还可以使用若干服务器端的钩子对项目强制执行各种类型的策略。 这些钩子脚本在推送到服务器之前和之后运行。 推送到服务器前运行的钩子可以在任何时候以非零值退出，拒绝推送并给客户端返回错误消息，还可以依你所想设置足够复杂的推送策略。")]),t._v(" "),a("h3",{attrs:{id:"pre-receive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-receive"}},[t._v("#")]),t._v(" pre-receive")]),t._v(" "),a("p",[t._v("处理来自客户端的推送操作时，最先被调用的脚本是 pre-receive。 它从标准输入获取一系列被推送的引用。如果它以非零值退出，所有的推送内容都不会被接受。 你可以用这个钩子阻止对引用进行非快进（non-fast-forward）的更新，或者对该推送所修改的所有引用和文件进行访问控制。")]),t._v(" "),a("h3",{attrs:{id:"update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update"}},[t._v("#")]),t._v(" update")]),t._v(" "),a("p",[t._v("update 脚本和 pre-receive 脚本十分类似，不同之处在于它会为每一个准备更新的分支各运行一次。 假如推送者同时向多个分支推送内容，pre-receive 只运行一次，相比之下 update 则会为每一个被推送的分支各运行一次。 它不会从标准输入读取内容，而是接受三个参数：引用的名字（分支），推送前的引用指向的内容的 SHA-1 值，以及用户准备推送的内容的 SHA-1 值。 如果 update 脚本以非零值退出，只有相应的那一个引用会被拒绝；其余的依然会被更新。")]),t._v(" "),a("h3",{attrs:{id:"post-receive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-receive"}},[t._v("#")]),t._v(" post-receive")]),t._v(" "),a("p",[t._v("post-receive 挂钩在整个过程完结以后运行，可以用来更新其他系统服务或者通知用户。 它接受与 pre-receive 相同的标准输入数据。 它的用途包括给某个邮件列表发信，通知持续集成（continous integration）的服务器， 或者更新问题追踪系统（ticket-tracking system） —— 甚至可以通过分析提交信息来决定某个问题（ticket）是否应该被开启，修改或者关闭。 该脚本无法终止推送进程，不过客户端在它结束运行之前将保持连接状态， 所以如果你想做其他操作需谨慎使用它，因为它将耗费你很长的一段时间")])])}),[],!1,null,null,null);e.default=r.exports}}]);