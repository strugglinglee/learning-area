(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{453:function(a,e,t){"use strict";t.r(e);var s=t(65),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"什么是flex布局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是flex布局"}},[a._v("#")]),a._v(" 什么是Flex布局")]),a._v(" "),t("p",[a._v("Flex 是 "),t("code",[a._v("Flexible Box")]),a._v(" 的缩写，意为"),t("code",[a._v('"弹性布局"')]),a._v("，用来为盒状模型提供最大的灵活性。换句话说，你想要的任何布局灵活的flex基本都能帮你实现。")]),a._v(" "),t("blockquote",[t("p",[a._v("任何一个父元素都可以指定为 Flex 布局。")])]),a._v(" "),t("p",[a._v('采用 Flex 布局的元素，称为 Flex 父元素（flex container），简称"父元素"。\n它的所有子元素自动成为父元素成员，称为 Flex 子元素（flex item），简称"子元素"。')]),a._v(" "),t("ul",[t("li",[a._v("父元素默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。")]),a._v(" "),t("li",[a._v("子元素默认沿主轴排列。单个子元素占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。")])]),a._v(" "),t("blockquote",[t("p",[a._v("这里的“父元素(container)”很多地方会直译为“容器”，个人认为叫“父元素”更通俗易懂，本文统称“父元素”，同理，其他地方“子元素（item）”会被直译为“项目”，本文统称“子元素”。")])]),a._v(" "),t("h3",{attrs:{id:"重点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重点"}},[a._v("#")]),a._v(" 重点")]),a._v(" "),t("p",[a._v("与“主轴”垂直的轴称为“交叉轴”，通过对flex-direction的设定，主轴和交叉轴可以改变。")]),a._v(" "),t("h2",{attrs:{id:"父元素的属性-flex-container"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#父元素的属性-flex-container"}},[a._v("#")]),a._v(" 父元素的属性(Flex-container)")]),a._v(" "),t("p",[a._v("以下6个属性设置在父元素上。")]),a._v(" "),t("h3",{attrs:{id:"一、flex-direction-方向"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、flex-direction-方向"}},[a._v("#")]),a._v(" 一、flex-direction 方向")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("flex-direction: row(default) | row-reverse | column | column-reverse\n")])])]),t("p",[a._v("决定主轴的方向（即子元素的排列方向）")]),a._v(" "),t("ul",[t("li",[a._v("row（默认值）：主轴为水平方向，起点在左端。")]),a._v(" "),t("li",[a._v("row-reverse：主轴为水平方向，起点在右端。")]),a._v(" "),t("li",[a._v("column：主轴为垂直方向，起点在上沿。")]),a._v(" "),t("li",[a._v("column-reverse：主轴为垂直方向，起点在下沿。")])]),a._v(" "),t("h3",{attrs:{id:"二、flex-wrap-换行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、flex-wrap-换行"}},[a._v("#")]),a._v(" 二、flex-wrap 换行")]),a._v(" "),t("p",[a._v('默认情况下，子元素都排在一条线（又称"轴线"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。')]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("flex-wrap: nowrap(default) | wrap | wrap-reverse\n")])])]),t("ul",[t("li",[a._v("nowrap（默认）：不换行")]),a._v(" "),t("li",[a._v("wrap：换行，第一行在上方")]),a._v(" "),t("li",[a._v("wrap-reverse：换行，第一行在下方")])]),a._v(" "),t("h3",{attrs:{id:"三、flex-flow-流向"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、flex-flow-流向"}},[a._v("#")]),a._v(" 三、flex-flow 流向")]),a._v(" "),t("p",[a._v("flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。")]),a._v(" "),t("blockquote",[t("p",[a._v("简单理解 方向+换行一起决定了流向")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("flex-flow: <flex-direction> || <flex-wrap>;\n")])])]),t("h3",{attrs:{id:"四、justify-content-主轴对齐方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、justify-content-主轴对齐方式"}},[a._v("#")]),a._v(" 四、justify-content 主轴对齐方式")]),a._v(" "),t("p",[a._v("属性定义了子元素在主轴上的对齐方式")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("justify-content: flex-start | flex-end | center | space-between | space-around;\n")])])]),t("ul",[t("li",[a._v("flex-start（默认值）：左对齐")]),a._v(" "),t("li",[a._v("flex-end：右对齐")]),a._v(" "),t("li",[a._v("center： 居中")]),a._v(" "),t("li",[a._v("space-between：两端对齐，子元素之间的间隔都相等。")]),a._v(" "),t("li",[a._v("space-around：每个子元素两侧的间隔相等。所以，子元素之间的间隔比子元素与边框的间隔大一倍。")])]),a._v(" "),t("h3",{attrs:{id:"五、align-items-交叉轴对齐方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、align-items-交叉轴对齐方式"}},[a._v("#")]),a._v(" 五、align-items 交叉轴对齐方式")]),a._v(" "),t("p",[a._v("属性定义子元素在交叉轴上如何对齐")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("align-items: flex-start | flex-end | center | baseline | stretch(default)\n")])])]),t("ul",[t("li",[a._v("flex-start：交叉轴的起点对齐。")]),a._v(" "),t("li",[a._v("flex-end：交叉轴的终点对齐。")]),a._v(" "),t("li",[a._v("center：交叉轴的中点对齐。")]),a._v(" "),t("li",[a._v("baseline: 子元素的第一行文字的基线对齐。")]),a._v(" "),t("li",[a._v("stretch（默认值）：如果子元素未设置高度或设为auto，将占满整个父元素的高度。")])]),a._v(" "),t("h3",{attrs:{id:"六、align-content-多行交叉轴对齐方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、align-content-多行交叉轴对齐方式"}},[a._v("#")]),a._v(" 六、align-content 多行交叉轴对齐方式")]),a._v(" "),t("p",[a._v("align-content属性定义了多根轴线的对齐方式。如果子元素只有一根轴线，该属性不起作用。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("align-content: flex-start | flex-end | center | space-between | space-around | stretch(default);\n")])])]),t("ul",[t("li",[a._v("flex-start：与交叉轴的起点对齐。")]),a._v(" "),t("li",[a._v("flex-end：与交叉轴的终点对齐。")]),a._v(" "),t("li",[a._v("center：与交叉轴的中点对齐。")]),a._v(" "),t("li",[a._v("space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。")]),a._v(" "),t("li",[a._v("space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。")]),a._v(" "),t("li",[a._v("stretch（默认值）：轴线占满整个交叉轴。")])]),a._v(" "),t("h3",{attrs:{id:"align-content-vs-align-items"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#align-content-vs-align-items"}},[a._v("#")]),a._v(" align-content vs align-items")]),a._v(" "),t("h4",{attrs:{id:"相同点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相同点"}},[a._v("#")]),a._v(" 相同点：")]),a._v(" "),t("p",[a._v("都被用来设置对齐行为")]),a._v(" "),t("h4",{attrs:{id:"不同点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不同点"}},[a._v("#")]),a._v(" 不同点：")]),a._v(" "),t("p",[a._v("align-items 的设置对象是行内成员;\nalign-content 的设置对象是所有行，且只有在多行弹性盒子容器中才生效。")]),a._v(" "),t("h2",{attrs:{id:"子元素的属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#子元素的属性"}},[a._v("#")]),a._v(" 子元素的属性")]),a._v(" "),t("p",[a._v("以下6个属性设置在子元素上")]),a._v(" "),t("h3",{attrs:{id:"一、order-顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、order-顺序"}},[a._v("#")]),a._v(" 一、order 顺序")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("order: <integer>;\n")])])]),t("p",[a._v("属性定义子元素的排列顺序。数值越小，排列越靠前，默认为0。")]),a._v(" "),t("h3",{attrs:{id:"二、flex-grow-放大"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、flex-grow-放大"}},[a._v("#")]),a._v(" 二、flex-grow 放大")]),a._v(" "),t("p",[a._v("grow译翻译过来是生长，所以这个属性一定是和子元素的放大有关的")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(".item {\n  flex-grow: <number>; /* default 0 */\n}\n")])])]),t("h4",{attrs:{id:"父元素空间充足-子元素默认不变"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#父元素空间充足-子元素默认不变"}},[a._v("#")]),a._v(" 父元素空间充足，子元素默认不变")]),a._v(" "),t("p",[a._v("flex-grow属性定义子元素的放大比例，默认为"),t("code",[a._v("0")]),a._v("，即如果存在剩余空间，也不放大。\n"),t("strong",[a._v("简单理解：子元素flex-grow的值越大所占比例越大")])]),a._v(" "),t("h4",{attrs:{id:"使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[a._v("#")]),a._v(" 使用场景")]),a._v(" "),t("p",[a._v("子元素默认是不会放大的，所以使用的场景是父元素空间充足时，子元素需要放大/子元素放大比例不一")]),a._v(" "),t("blockquote",[t("p",[a._v("如果所有子元素的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个子元素的flex-grow属性为2，其他子元素都为1，则前者占据的剩余空间将比其他项多一倍。")])]),a._v(" "),t("h3",{attrs:{id:"三、flex-shrink-缩小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、flex-shrink-缩小"}},[a._v("#")]),a._v(" 三、flex-shrink 缩小")]),a._v(" "),t("p",[a._v("shrink翻译过来是缩小，故这个属性一定是和子元素缩小有关的")]),a._v(" "),t("h4",{attrs:{id:"父元素空间不足-子元素默认等比缩小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#父元素空间不足-子元素默认等比缩小"}},[a._v("#")]),a._v(" 父元素空间不足，子元素默认等比缩小")]),a._v(" "),t("p",[a._v("flex-shrink属性定义了子元素的缩小比例，默认为1，即如果空间不足，该子元素将缩小。")]),a._v(" "),t("p",[t("strong",[a._v("简单理解：和flex-grow刚好相反，子元素flex-shrink的值越大所占比例越小")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(".item {\n  flex-shrink: <number>; /* default 1 */\n}\n")])])]),t("h4",{attrs:{id:"使用场景-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-2"}},[a._v("#")]),a._v(" 使用场景")]),a._v(" "),t("p",[a._v("默认是会等比缩小的，所以使用的场景是空间不足时，子元素缩小比例不同/不需要缩小")]),a._v(" "),t("blockquote",[t("p",[a._v("如果所有子元素的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个子元素的flex-shrink属性为0，其他子元素都为1，则空间不足时，前者不缩小。\n负值对该属性无效。")])]),a._v(" "),t("h3",{attrs:{id:"四、flex-basis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、flex-basis"}},[a._v("#")]),a._v(" 四、flex-basis")]),a._v(" "),t("p",[a._v("flex-basis属性定义了在分配多余空间之前，子元素占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即子元素的本来大小。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(".item {\n  flex-basis: <length> | auto; /* default auto */\n}\n")])])]),t("p",[a._v("它可以设为跟width或height属性一样的值（比如350px），则子元素将占据固定空间。")]),a._v(" "),t("h3",{attrs:{id:"五、flex"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、flex"}},[a._v("#")]),a._v(" 五、flex")]),a._v(" "),t("p",[a._v("flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//缩写记忆顺序为gsb\n.item {\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n")])])]),t("h4",{attrs:{id:"该属性的快捷值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#该属性的快捷值"}},[a._v("#")]),a._v(" 该属性的快捷值")]),a._v(" "),t("ul",[t("li",[a._v("auto (1 1 auto)")]),a._v(" "),t("li",[a._v("none (0 0 auto)")]),a._v(" "),t("li",[a._v("1 (1 1 0%)")]),a._v(" "),t("li",[a._v("0 (0 1 0%)")])]),a._v(" "),t("h4",{attrs:{id:"flex-auto和flex-1的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flex-auto和flex-1的区别"}},[a._v("#")]),a._v(" flex:auto和flex:1的区别")]),a._v(" "),t("p",[a._v("实际上就是flex-basis为0%和auto的区别,auto为默认值即为子元素的大小")]),a._v(" "),t("ul",[t("li",[a._v("flex-basis为0%，可以覆盖width")]),a._v(" "),t("li",[a._v("flex-basis为auto，width权限更高")])]),a._v(" "),t("h5",{attrs:{id:"结论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[a._v("#")]),a._v(" 结论：")]),a._v(" "),t("p",[a._v("存在多余空间时，flex为1，width将会被忽略；flex为auto时，width的设置将是有效的")]),a._v(" "),t("h3",{attrs:{id:"六、align-self"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、align-self"}},[a._v("#")]),a._v(" 六、align-self")]),a._v(" "),t("p",[a._v("align-self属性允许单个子元素有与其他子元素不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。")]),a._v(" "),t("h4",{attrs:{id:"使用场景-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-3"}},[a._v("#")]),a._v(" 使用场景")]),a._v(" "),t("p",[a._v("单个子元素有与其他子元素有不一样的对齐方式")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(".item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n")])])]),t("p",[a._v("该属性可能取6个值，除了auto，其他都与align-items属性完全一致。")])])}),[],!1,null,null,null);e.default=r.exports}}]);