(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{518:function(a,s,t){"use strict";t.r(s);var r=t(62),e=Object(r.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"浏览器运行机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器运行机制"}},[a._v("#")]),a._v(" 浏览器运行机制")]),a._v(" "),t("h2",{attrs:{id:"浏览器内核"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核"}},[a._v("#")]),a._v(" 浏览器内核")]),a._v(" "),t("h3",{attrs:{id:"组成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组成"}},[a._v("#")]),a._v(" 组成")]),a._v(" "),t("ul",[t("li",[a._v("渲染引擎\n"),t("ul",[t("li",[a._v("HTML 解释器")]),a._v(" "),t("li",[a._v("CSS 解释器")]),a._v(" "),t("li",[a._v("布局")]),a._v(" "),t("li",[a._v("网络")]),a._v(" "),t("li",[a._v("存储")]),a._v(" "),t("li",[a._v("图形")]),a._v(" "),t("li",[a._v("音视频")]),a._v(" "),t("li",[a._v("图片解码器等")])])]),a._v(" "),t("li",[a._v("JS引擎")])]),a._v(" "),t("h3",{attrs:{id:"分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[a._v("#")]),a._v(" 分类")]),a._v(" "),t("ul",[t("li",[a._v("Trident（IE）")]),a._v(" "),t("li",[a._v("Gecko（火狐）")]),a._v(" "),t("li",[t("strong",[a._v("Blink（Chrome、Opera）")])]),a._v(" "),t("li",[t("strong",[a._v("Webkit（Safari）")])])]),a._v(" "),t("p",[a._v("Blink是基于Webkit衍生而来的一个分支")]),a._v(" "),t("h2",{attrs:{id:"渲染过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染过程"}},[a._v("#")]),a._v(" 渲染过程")]),a._v(" "),t("h3",{attrs:{id:"渲染部件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染部件"}},[a._v("#")]),a._v(" 渲染部件")]),a._v(" "),t("ol",[t("li",[t("p",[t("strong",[a._v("HTML 解释器")]),a._v("：将 HTML 文档经过词法分析输出 DOM 树")])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("CSS 解释器")]),a._v("：解析 CSS 文档, 生成样式规则")])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("图层布局计算模块")]),a._v("：布局计算每个对象的精确位置和大小")])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("视图绘制模块与JavaScript 引擎")]),a._v("：进行具体节点的图像绘制，将像素渲染到屏幕上")])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("JavaScript 引擎")]),a._v("：编译执行 Javascript 代码")])])]),a._v(" "),t("h3",{attrs:{id:"渲染步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染步骤"}},[a._v("#")]),a._v(" 渲染步骤")]),a._v(" "),t("ol",[t("li",[a._v("基于 HTML 构建一个 DOM 树")]),a._v(" "),t("li",[a._v("这棵 DOM 树与 CSS 解释器解析出的 CSSOM 相结合，就有了布局渲染树")]),a._v(" "),t("li",[a._v("最后浏览器以布局渲染树为蓝本，去计算布局并绘制图像，完成页面的初次渲染")])]),a._v(" "),t("h4",{attrs:{id:"解析-html"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析-html"}},[a._v("#")]),a._v(" 解析 HTML")]),a._v(" "),t("p",[a._v("在这一步浏览器执行了所有的加载解析逻辑，在解析 HTML 的过程中发出了页面渲染所需的各种外部资源请求。")]),a._v(" "),t("h4",{attrs:{id:"计算样式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算样式"}},[a._v("#")]),a._v(" 计算样式")]),a._v(" "),t("p",[a._v("浏览器将识别并加载所有的 CSS 样式信息与 DOM 树合并，最终生成页面 render 树（:after :before 这样的伪元素会在这个环节被构建到 DOM 树中）。")]),a._v(" "),t("h4",{attrs:{id:"计算图层布局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算图层布局"}},[a._v("#")]),a._v(" 计算图层布局")]),a._v(" "),t("p",[a._v("页面中所有元素的相对位置信息，大小等信息均在这一步得到计算。")]),a._v(" "),t("h4",{attrs:{id:"绘制图层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#绘制图层"}},[a._v("#")]),a._v(" 绘制图层")]),a._v(" "),t("p",[a._v("在这一步中浏览器会根据我们的 DOM 代码结果，把每一个页面图层转换为像素，并对所有的媒体文件进行解码。")]),a._v(" "),t("h4",{attrs:{id:"整合图层-得到页面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整合图层-得到页面"}},[a._v("#")]),a._v(" 整合图层，得到页面")]),a._v(" "),t("p",[a._v("最后一步浏览器会合并合各个图层，将数据由 CPU 输出给 GPU 最终绘制在屏幕上。（复杂的视图层会给这个阶段的 GPU 计算带来一些压力，在实际应用中为了优化动画性能，我们有时会手动区分不同的图层）。")]),a._v(" "),t("h2",{attrs:{id:"渲染优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染优化"}},[a._v("#")]),a._v(" 渲染优化")]),a._v(" "),t("p",[t("strong",[a._v("CSS引擎查找样式表规则：")]),a._v("\nCSS选择符是从右往左进行匹配的")]),a._v(" "),t("h3",{attrs:{id:"css书写建议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css书写建议"}},[a._v("#")]),a._v(" css书写建议")]),a._v(" "),t("ol",[t("li",[a._v("避免使用通配符，只对需要用到的元素进行选择")]),a._v(" "),t("li",[a._v("关注可以通过继承实现的属性，避免重复匹配重复定义")]),a._v(" "),t("li",[a._v("少用标签选择器。如果可以，用类选择器替代")]),a._v(" "),t("li",[a._v("减少嵌套。后代选择器的开销是最高的，因此我们应该尽量将选择器的深度降到最低（最高不要超过三层），尽可能使用类来关联每一个标签元素")])]),a._v(" "),t("h2",{attrs:{id:"阻塞"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#阻塞"}},[a._v("#")]),a._v(" 阻塞")]),a._v(" "),t("p",[a._v("HTML、CSS 和 JS，都具有阻塞渲染的特性。")]),a._v(" "),t("h3",{attrs:{id:"尽快将css下载到客户端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#尽快将css下载到客户端"}},[a._v("#")]),a._v(" 尽快将CSS下载到客户端")]),a._v(" "),t("p",[a._v("尽早（将 CSS 放在 head 标签里）和尽快（启用 CDN 实现静态资源加载速度的优化）。")]),a._v(" "),t("h3",{attrs:{id:"js-引擎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-引擎"}},[a._v("#")]),a._v(" JS 引擎")]),a._v(" "),t("p",[a._v("JS 的作用在于修改，它帮助我们修改网页的方方面面：内容、样式以及它如何响应用户交互。这“方方面面”的修改，本质上都是对 DOM 和 CSSDOM 进行修改。因此 JS 的执行会阻止 CSSOM，在我们不作显式声明的情况下，它也会阻塞 DOM。")]),a._v(" "),t("h4",{attrs:{id:"js-引擎是独立于渲染引擎存在的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-引擎是独立于渲染引擎存在的"}},[a._v("#")]),a._v(" JS 引擎是独立于渲染引擎存在的")]),a._v(" "),t("p",[a._v("我们的 JS 代码在文档的何处插入，就在何处执行。当 HTML 解析器遇到一个 script 标签时，它会暂停渲染过程，将控制权交给 JS 引擎。JS 引擎对内联的 JS 代码会直接执行，对外部 JS 文件还要先获取到脚本、再进行执行。")]),a._v(" "),t("p",[a._v("等 JS 引擎运行完毕，浏览器又会把控制权还给渲染引擎，继续 CSSOM 和 DOM 的构建。")]),a._v(" "),t("h4",{attrs:{id:"js-的三种加载方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-的三种加载方式"}},[a._v("#")]),a._v(" JS 的三种加载方式")]),a._v(" "),t("h5",{attrs:{id:"正常模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正常模式"}},[a._v("#")]),a._v(" 正常模式")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("script src"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"index.js"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("script"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("h5",{attrs:{id:"async-模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#async-模式"}},[a._v("#")]),a._v(" async 模式")]),a._v(" "),t("p",[a._v("async 模式下，JS 不会阻塞浏览器做任何其它的事情。它的加载是异步的，当它加载结束，JS 脚本会立即执行。")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("script "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("async")]),a._v(" src"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"index.js"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("script"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("h5",{attrs:{id:"defer-模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#defer-模式"}},[a._v("#")]),a._v(" defer 模式")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("script defer src"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"index.js"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("script"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("p",[a._v("defer 模式下，JS 的加载是异步的，执行是被推迟的。等整个文档解析完成、DOMContentLoaded 事件即将被触发时，被标记了 defer 的 JS 文件才会开始依次执行。")]),a._v(" "),t("p",[a._v("可以确认一个 JS 文件的执行时机并不一定非要是此时此刻，我们就可以通过对它使用 defer 和 async 来避免不必要的阻塞")])])}),[],!1,null,null,null);s.default=e.exports}}]);