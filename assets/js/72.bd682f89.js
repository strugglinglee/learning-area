(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{529:function(e,n,a){"use strict";a.r(n);var t=a(62),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"代码分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码分离"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://www.webpackjs.com/guides/code-splitting/",target:"_blank",rel:"noopener noreferrer"}},[e._v("代码分离"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("能够将代码分离到不同的 bundle 中，可以按需加载或者并行加载这些文件。\n代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，使用合理可以极大影响加载时间")]),e._v(" "),a("h3",{attrs:{id:"代码分离的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码分离的方法"}},[e._v("#")]),e._v(" 代码分离的方法")]),e._v(" "),a("ul",[a("li",[e._v("入口起点：使用"),a("code",[e._v("entry")]),e._v("配置手动地分离代码")]),e._v(" "),a("li",[e._v("防止重复：使用"),a("code",[e._v("CommonsChunkPlugin")]),e._v("去重和分离 chunk")]),e._v(" "),a("li",[e._v("动态导入：通过模块的内联函数调用来分离代码")])]),e._v(" "),a("h3",{attrs:{id:"commonschunkplugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonschunkplugin"}},[e._v("#")]),e._v(" CommonsChunkPlugin")]),e._v(" "),a("p",[a("code",[e._v("CommonsChunkPlugin")]),e._v("插件可以将公共的依赖模块提取到已有的入口 chunk 中，或者提取到一个新生成的 chunk。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("new webpack.optimize.CommonsChunkPlugin({\n  name: 'common' // 指定公共 bundle 的名称。\n})\n")])])]),a("p",[e._v("webpack4 移除了 CommonsChunkPlugin，所以需要作相应的修改")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("//optimization与entry/plugins同级\noptimization: {\n   runtimeChunk: {\n      name: 'manifest'\n   },\n   splitChunks: {\n      maxInitialRequests: 10,\n      cacheGroups: {\n         common: {\n            name: 'common',\n            //chunks: 'all'\n         }\n      }\n   }\n}\n")])])]),a("h4",{attrs:{id:"一些对于代码分离很有帮助的插件和-loaders"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些对于代码分离很有帮助的插件和-loaders"}},[e._v("#")]),e._v(" 一些对于代码分离很有帮助的插件和 loaders")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ExtractTextPlugin")]),e._v(": 用于将 CSS 从主应用程序中分离。")]),e._v(" "),a("li",[a("code",[e._v("bundle-loader")]),e._v(": 用于分离代码和延迟加载生成的 bundle。")]),e._v(" "),a("li",[a("code",[e._v("promise-loader")]),e._v(": 类似于 bundle-loader ，但是使用的是 promises。")])]),e._v(" "),a("h3",{attrs:{id:"动态导入-dynamic-imports"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态导入-dynamic-imports"}},[e._v("#")]),e._v(" 动态导入（dynamic imports）")]),e._v(" "),a("ul",[a("li",[e._v("使用符合 ECMAScript 提案 的 import() 语法 (优先选择)")]),e._v(" "),a("li",[e._v("使用 webpack 特定的 require.ensure")])]),e._v(" "),a("h3",{attrs:{id:"bundle分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bundle分析"}},[e._v("#")]),e._v(" bundle分析")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("webpack-chart")]),e._v(": webpack 数据交互饼图。")]),e._v(" "),a("li",[a("code",[e._v("webpack-visualizer")]),e._v(": 可视化并分析你的 bundle，检查哪些模块占用空间，哪些可能是重复使用的。")]),e._v(" "),a("li",[a("code",[e._v("webpack-bundle-analyzer")]),e._v(": 一款分析 bundle 内容的插件及 CLI 工具，以便捷的、交互式、可缩放的树状图形式展现给用户。")])])])}),[],!1,null,null,null);n.default=s.exports}}]);