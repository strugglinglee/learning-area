(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{468:function(e,t,r){"use strict";r.r(t);var o=r(65),p=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("ul",[r("li",[e._v("get(target, propKey, receiver)：拦截对象属性的读取")]),e._v(" "),r("li",[e._v("set(target, propKey, value, receiver)：拦截对象属性的设置")]),e._v(" "),r("li",[e._v("has(target, propKey)：拦截propKey in proxy的操作，返回一个布尔值。")]),e._v(" "),r("li",[e._v("apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。")]),e._v(" "),r("li",[e._v("construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args)。")]),e._v(" "),r("li",[e._v("deleteProperty(target, propKey)：拦截delete proxy[propKey]的操作，返回一个布尔值。")]),e._v(" "),r("li",[e._v("ownKeys(target)：拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。")]),e._v(" "),r("li",[e._v("getOwnPropertyDescriptor(target, propKey)：拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。")]),e._v(" "),r("li",[e._v("defineProperty(target, propKey, propDesc)：拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。")]),e._v(" "),r("li",[e._v("preventExtensions(target)：拦截Object.preventExtensions(proxy)，返回一个布尔值。")]),e._v(" "),r("li",[e._v("getPrototypeOf(target)：拦截Object.getPrototypeOf(proxy)，返回一个对象。")]),e._v(" "),r("li",[e._v("isExtensible(target)：拦截Object.isExtensible(proxy)，返回一个布尔值。")]),e._v(" "),r("li",[e._v("setPrototypeOf(target, proto)：拦截Object.setPrototypeOf(proxy, proto)，返回- 一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。")])]),e._v(" "),r("p",[e._v("如果 Proxy对象和 Reflect对象联合使用，前者拦截赋值操作，后者完成赋值的默认行为，而且传入了receiver，那么Reflect.set会触发Proxy.defineProperty拦截。")])])}),[],!1,null,null,null);t.default=p.exports}}]);