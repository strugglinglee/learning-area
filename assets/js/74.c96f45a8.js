(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{531:function(t,e,r){"use strict";r.r(e);var o=r(62),a=Object(o.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"懒加载"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#懒加载"}},[t._v("#")]),t._v(" "),r("a",{attrs:{href:"https://www.webpackjs.com/guides/lazy-loading/",target:"_blank",rel:"noopener noreferrer"}},[t._v("懒加载"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("懒加载或者按需加载，是一种很好的优化网页或应用的方式。")]),t._v(" "),r("p",[t._v("这种方式实际上是先把你的代码在一些逻辑断点处分离开，然后在一些代码块中完成某些操作后，立即引用或即将引用另外一些新的代码块。")]),t._v(" "),r("p",[t._v("这样加快了应用的初始加载速度，减轻了它的总体体积，因为某些代码块可能永远不会被加载。")]),t._v(" "),r("p",[t._v("理解：")]),t._v(" "),r("ol",[r("li",[t._v("第一步：先实现代码分离(但如果只进行这一步，每次加载页面的时候仍然会请求它)")]),t._v(" "),r("li",[t._v("第二步：懒加载代码块")])]),t._v(" "),r("blockquote",[r("p",[t._v("注意当调用 ES6 模块的 import() 方法（引入模块）时，必须指向模块的 .default 值，因为它才是 promise 被处理后返回的实际的 module 对象。")])])])}),[],!1,null,null,null);e.default=a.exports}}]);